    ../BMS/bmsadbms1818/docs/code/st_forum.txt
    Selected responses to question from clive on --
    https://community.st.com/s/global-search/CRC-15


    //****************************************************************************
    uint16_t CRC15_FastBlock(uint16_t crc, size_t size, uint8_t *buffer)
    {
     static const uint16_t CRCTable[256] = { // LTC6804 15-bit CRC Polynomial x15+x14+x10+x8+x7+x4+x3+1
     0x0000,0x4599,0x4EAB,0x0B32,0x58CF,0x1D56,0x1664,0x53FD, // 0xC599 byte table - sourcer32@gmail.com
     0x7407,0x319E,0x3AAC,0x7F35,0x2CC8,0x6951,0x6263,0x27FA,
     0x2D97,0x680E,0x633C,0x26A5,0x7558,0x30C1,0x3BF3,0x7E6A,
     0x5990,0x1C09,0x173B,0x52A2,0x015F,0x44C6,0x4FF4,0x0A6D,
     0x5B2E,0x1EB7,0x1585,0x501C,0x03E1,0x4678,0x4D4A,0x08D3,
     0x2F29,0x6AB0,0x6182,0x241B,0x77E6,0x327F,0x394D,0x7CD4,
     0x76B9,0x3320,0x3812,0x7D8B,0x2E76,0x6BEF,0x60DD,0x2544,
     0x02BE,0x4727,0x4C15,0x098C,0x5A71,0x1FE8,0x14DA,0x5143,
     0x73C5,0x365C,0x3D6E,0x78F7,0x2B0A,0x6E93,0x65A1,0x2038,
     0x07C2,0x425B,0x4969,0x0CF0,0x5F0D,0x1A94,0x11A6,0x543F,
     0x5E52,0x1BCB,0x10F9,0x5560,0x069D,0x4304,0x4836,0x0DAF,
     0x2A55,0x6FCC,0x64FE,0x2167,0x729A,0x3703,0x3C31,0x79A8,
     0x28EB,0x6D72,0x6640,0x23D9,0x7024,0x35BD,0x3E8F,0x7B16,
     0x5CEC,0x1975,0x1247,0x57DE,0x0423,0x41BA,0x4A88,0x0F11,
     0x057C,0x40E5,0x4BD7,0x0E4E,0x5DB3,0x182A,0x1318,0x5681,
     0x717B,0x34E2,0x3FD0,0x7A49,0x29B4,0x6C2D,0x671F,0x2286,
     0x2213,0x678A,0x6CB8,0x2921,0x7ADC,0x3F45,0x3477,0x71EE,
     0x5614,0x138D,0x18BF,0x5D26,0x0EDB,0x4B42,0x4070,0x05E9,
     0x0F84,0x4A1D,0x412F,0x04B6,0x574B,0x12D2,0x19E0,0x5C79,
     0x7B83,0x3E1A,0x3528,0x70B1,0x234C,0x66D5,0x6DE7,0x287E,
     0x793D,0x3CA4,0x3796,0x720F,0x21F2,0x646B,0x6F59,0x2AC0,
     0x0D3A,0x48A3,0x4391,0x0608,0x55F5,0x106C,0x1B5E,0x5EC7,
     0x54AA,0x1133,0x1A01,0x5F98,0x0C65,0x49FC,0x42CE,0x0757,
     0x20AD,0x6534,0x6E06,0x2B9F,0x7862,0x3DFB,0x36C9,0x7350,
     0x51D6,0x144F,0x1F7D,0x5AE4,0x0919,0x4C80,0x47B2,0x022B,
     0x25D1,0x6048,0x6B7A,0x2EE3,0x7D1E,0x3887,0x33B5,0x762C,
     0x7C41,0x39D8,0x32EA,0x7773,0x248E,0x6117,0x6A25,0x2FBC,
     0x0846,0x4DDF,0x46ED,0x0374,0x5089,0x1510,0x1E22,0x5BBB,
     0x0AF8,0x4F61,0x4453,0x01CA,0x5237,0x17AE,0x1C9C,0x5905,
     0x7EFF,0x3B66,0x3054,0x75CD,0x2630,0x63A9,0x689B,0x2D02,
     0x276F,0x62F6,0x69C4,0x2C5D,0x7FA0,0x3A39,0x310B,0x7492,
     0x5368,0x16F1,0x1DC3,0x585A,0x0BA7,0x4E3E,0x450C,0x0095 };
     while(size--)
     {
     crc = crc ^ ((uint16_t)*buffer++ << 7); // Align and apply data byte
     crc = (crc << 8) ^ CRCTable[(crc >> 7) & 0xFF]; // Apply CRC 8-bits at a time
     }
     return(crc & 0x7FFF); // Clear most significant bit
    }
    //****************************************************************************
    {
     uint8_t test[] = { 0x00, 0x01 };
     printf('%04
    X', CRC15_FastBlock(0x0010, sizeof(test), test) << 1);
    }

        //****************************************************************************
    // CRC15 LTC6804 x15+x14+x10+x8+x7+x4+x3+1
    // http://cds.linear.com/docs/en/datasheet/680412fc.pdf
    // Implementation Copyright (C) 2017 sourcer32@gmail.com All Rights Reserved
    //****************************************************************************
    #include <windows.h>
    #include <stdio.h>
    #include <stdlib.h>
    typedef unsigned char uint8_t;
    typedef unsigned short uint16_t;
    //****************************************************************************
    uint16_t CRC15_Slow(uint16_t crc, uint8_t data)
    {
     int i;
     crc = crc ^ ((uint16_t)data << 7);
     for(i=0; i<8; i++)
     {
     if (crc & 0x4000)
     crc = (crc << 1) ^ 0xC599; // 4599, but has added benefit of clearing high order bit
     else
     crc <<= 1;
     }
     return(crc);
    }
    //****************************************************************************
    uint16_t CRC15_Quick(uint16_t crc, uint8_t data)
    {
     static const uint16_t CRCTable[16] = { // LTC6804 15-bit CRC Polynomial x15+x14+x10+x8+x7+x4+x3+1
     0x0000,0x4599,0x4EAB,0x0B32,0x58CF,0x1D56,0x1664,0x53FD, // 0xC599 nibble table - sourcer32@gmail.com
     0x7407,0x319E,0x3AAC,0x7F35,0x2CC8,0x6951,0x6263,0x27FA };
     crc = crc ^ ((uint16_t)data << 7); // Align and apply data byte
     crc = (crc << 4) ^ CRCTable[(crc >> 11) & 0xF]; // Apply CRC 4-bits at a time, 2 rounds
     crc = (crc << 4) ^ CRCTable[(crc >> 11) & 0xF];
     return(crc);
    }
    //****************************************************************************
    int main(int argc, char **argv)
    {
     uint16_t crc;
     crc = 0x0010; // Initial state, per manual
     crc = CRC15_Slow(crc, 0x00); // Apply 0x0001 as two bytes, msb first
     crc = CRC15_Slow(crc, 0x01);
     printf('%04X\n', crc << 1); // 0x3D6E, per manual shift into most significant 15-bit, clearing the least
     crc = 0x0010; // Initial state, per manual
     crc = CRC15_Quick(crc, 0x00); // Apply 0x0001 as two bytes, msb first
     crc = CRC15_Quick(crc, 0x01);
     printf('%04X\n', crc << 1); // 0x3D6E, per manual shift into most significant 15-bit, clearing the least
     return(1);
    }
    //****************************************************************************
    ‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍
    Can the STM32 CRC Peripheral be abused into doing CRC-24Q ? Or other 24-bit CRC? Or shortened bit width CRC?

Ok, well I'm going to answer my own question, Yes.

 

This stems from an earlier conversation about doing CRC15 or CRC-15-CAN, where I had postulated that it probably could, and I then subsequently proof-of-concepted that idea, and then started pondering other uses.

 

https://community.st.com/s/question/0D53W00001bIU55SAG/can-the-stm32-crc-peripheral-be-made-to-work-with-the-crc15can-polynomial

 

The hardware implementation provides for 7, 8, 16 and 32-bit modes of operation, but for byte-wise and left-shifting, we can use the high-order portion of the register to carry the residual and apply the polynomial. We have to shift the initial values and polynomial in to the left most portion of the selected word size, and the right most, least significant side is zero'd, and finally when you recover the computed value, realign that into the expected bit width. For checking a CRC, you typically run the value through itself, and it drops to zero, as it perfectly divides into the polynomial.

 

CRC-24Q (Qualcomm) polynomial typically quoted as 0x864CFB or 0x1864CFB

x^24+ x^23+ x^18+ x^17+ x^14+ x^11+ x^10+ x^7+ x^6+ x^5+ x^4+ x^3+ x+1

    //******************************************************************************
     
    // Copyright (C) 2022 Clive Turvey (aka Tesla DeLorean, sourcer32@gmail.com)
    //  All Rights Reserved
     
    void Crc24Test(void) // sourcer32@gmail.com
    {
      uint8_t test1[] = { 0x01,0x02,0x03,0x04,0x05,0x06 }; // 0xBC7E06
      uint8_t test2[] = { 0x11,0x22,0x33,0x44,0x55,0x66 }; // 0xD686A9
     
      uint8_t rtcm3testpattern[] = // Packet of known veracity
      { 0xD3,0x00,0x13,0x3E,0xD7,0xD3,0x02,0x02,0x98,0x0E,0xDE,
        0xEF,0x34,0xB4,0xBD,0x62,0xAC,0x09,0x41,0x98,0x6F,0x33,
        0x36,0x0B,0x98 }; // Should be zero when pulled thru polynomial
     
      /* CRC handler declaration */
      CRC_HandleTypeDef CrcHandle = {0};
     
      /* CRC Peripheral clock enable */
      __HAL_RCC_CRC_CLK_ENABLE();
     
      /*##-1- Configure the CRC peripheral #######################################*/
      CrcHandle.Instance = CRC;
     
      /* The default polynomial is not used. It is required to defined it in CrcHandle.Init.GeneratingPolynomial*/
      CrcHandle.Init.DefaultPolynomialUse    = DEFAULT_POLYNOMIAL_DISABLE;
     
      /* Set the value of the polynomial */
      CrcHandle.Init.GeneratingPolynomial    = (0x864CFB << 8); // 24-bit CRC24Q used for SBAS and RTCM3
     
      /* The user-defined generating polynomial generates a 32-bit long CRC */
      CrcHandle.Init.CRCLength               = CRC_POLYLENGTH_32B; // Actually 24-bit we use the high order bits
     
      /* The default init value is not used, want zero */
      CrcHandle.Init.DefaultInitValueUse     = DEFAULT_INIT_VALUE_DISABLE;
     
      /* The used-defined initialization value */
      CrcHandle.Init.InitValue               = 0;
     
    /* The input data are not inverted */
      CrcHandle.Init.InputDataInversionMode  = CRC_INPUTDATA_INVERSION_NONE;
     
      /* The output data are not inverted */
      CrcHandle.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
     
      /* The input data are 8-bit long, ie digested byte-wise */
      CrcHandle.InputDataFormat              = CRC_INPUTDATA_FORMAT_BYTES;
     
      if (HAL_CRC_Init(&CrcHandle) != HAL_OK)
      {
        /* Initialization Error */
        Error_Handler(__FILE__, __LINE__);
      }
     
      printf("CRC24Q %06X   TEST1 BC7E06?\n", HAL_CRC_Calculate(&CrcHandle, (uint32_t *)test1, sizeof(test1)) >> 8); // Get high-order 24-bit computation
     
      printf("CRC24Q %06X   TEST2 D686A9?\n", HAL_CRC_Calculate(&CrcHandle, (uint32_t *)test2, sizeof(test2)) >> 8); // Get high-order 24-bit computation
     
      printf("CRC24Q %08X RTCM3 CHECK Zero?\n", HAL_CRC_Calculate(&CrcHandle, (uint32_t *)rtcm3testpattern, sizeof(rtcm3testpattern)));
     
      printf("CRC24Q %06X   RTCM3 COMPUTE 360B98?\n", HAL_CRC_Calculate(&CrcHandle, (uint32_t *)rtcm3testpattern, sizeof(rtcm3testpattern) - 3) >> 8);
    }
     
    //******************************************************************************

    CRC24Q BC7E06   TEST1 BC7E06?
    CRC24Q D686A9   TEST2 D686A9?
    CRC24Q 00000000 RTCM3 CHECK Zero?
    CRC24Q 360B98   RTCM3 COMPUTE 360B98?

https://github.com/cturvey/RandomNinjaChef/blob/main/RTCM3Test.c
This content is a preview of a link.

    //******************************************************************************
     
    // The ADBMS1818 datasheet shows a 15 bit polynomial for the CRC as
    //  x^15 + x^14 + x^10 + x^8 + x^7 + x^4 + x^3 + 1
    // Other sources call this a CAN-15-CRC polynomial
     
    // As for an example test pattern, we'll be using the ADBMS1818 datasheet
    //  example of a two byte {0x00, 0x01} input producing a 0x3D6E output,
    //  which uses the polynomical 0x4599 with seed/initial of 0x10, and shifts
    //  the 15b result by 1. The high-order 15-bits will already be suitably
    //  aligned.
     
    // Copyright (C) 2022 Clive Turvey (aka Tesla DeLorean, sourcer32@gmail.com)
    //  All Rights Reserved
     
    void Crc15Test(void) // sourcer32@gmail.com
    {
      uint8_t test1[] = {0x00, 0x01 }; // 0x3D6E
      uint8_t test2[] = {0x11, 0x22, 0x33, 0x44, 0x55 }; // 0x7876
     
      /* CRC handler declaration */
      CRC_HandleTypeDef CrcHandle = {0};
     
      /* CRC Peripheral clock enable */
      __HAL_RCC_CRC_CLK_ENABLE();
     
      /*##-1- Configure the CRC peripheral #######################################*/
      CrcHandle.Instance = CRC;
     
      /* The default polynomial is not used. It is required to defined it in CrcHandle.Init.GeneratingPolynomial*/
      CrcHandle.Init.DefaultPolynomialUse    = DEFAULT_POLYNOMIAL_DISABLE;
     
      /* Set the value of the polynomial */
      CrcHandle.Init.GeneratingPolynomial    = (0x4599 << 1); // 15-bit
     
      /* The user-defined generating polynomial generates a 16-bit long CRC */
      CrcHandle.Init.CRCLength               = CRC_POLYLENGTH_16B; // Actually 15-bit we use the high order bits
     
      /* The default init value is not used */
      CrcHandle.Init.DefaultInitValueUse     = DEFAULT_INIT_VALUE_DISABLE;
     
      /* The used-defined initialization value */
      CrcHandle.Init.InitValue               = (0x0010 << 1); // 15-bit top aligned
     
      /* The input data are not inverted */
      CrcHandle.Init.InputDataInversionMode  = CRC_INPUTDATA_INVERSION_NONE;
     
      /* The output data are not inverted */
      CrcHandle.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
     
      /* The input data are 8-bit long */
      CrcHandle.InputDataFormat              = CRC_INPUTDATA_FORMAT_BYTES;
     
      if (HAL_CRC_Init(&CrcHandle) != HAL_OK)
      {
        /* Initialization Error */
        Error_Handler(__FILE__, __LINE__);
      }
     
      printf("CRC-15 %04X TEST1 3D6E?\n", HAL_CRC_Calculate(&CrcHandle, (uint32_t *)test1, sizeof(test1)));
     
      printf("CRC-15 %04X TEST2 7876?\n", HAL_CRC_Calculate(&CrcHandle, (uint32_t *)test2, sizeof(test2)));
    }
     
    //******************************************************************************
     
    // Output test on STM32L4R5ZI
     
    //  CRC-15 3D6E TEST1 3D6E?
    //  CRC-15 7876 TEST2 7876?

    ‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍‍